@page "/Host"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.SignalR.Client
@inject AuthenticationStateProvider GetAuthenticationStateAsync

@inject NavigationManager Navigation
@implements IAsyncDisposable

@inject HttpClient Http
@attribute [Authorize]
<PageTitle>Host</PageTitle>



<div class="form-group">
    @*<label>
        User:
        <input @bind="userInput" />
    </label>*@
</div>
<div class="form-group">
    <label>
        Message:
        <input @bind="messageInput" size="50" />
    </label>
</div>
<button @onclick="Send" disabled="@(!IsConnected)">Send</button>

<hr>

<ul id="messagesList">
    @foreach (var message in messages)
    {
        <li>@message</li>
    }
</ul>

@code {
    private HubConnection? hubConnection;



    private List<string> messages = new List<string>();
    private string? userInput;
    private string? messageInput;

    protected override async Task OnInitializedAsync()
    {



        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chathub"))
            .Build();

        hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodedMsg = $"{user}: {message}";
            messages.Add(encodedMsg);
            InvokeAsync(StateHasChanged);
        });

        await hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (hubConnection is not null)
        {

            userInput = await GetName();
            await hubConnection.SendAsync("SendMessage", userInput, messageInput);

        }
    }

    private async Task<string> GetName()
    {
        var authstate = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var username = authstate.User;
        var nameofuser = username.Identity.Name;
        return nameofuser;
    }



    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
