@page "/"
@using BlazorSurf.Client.Components;
@using BlazorSurf.Shared
@using System.Text.Json
@using Blazored.Modal.Services;
@using Blazored.Modal;
@inject HttpClient Http
@inject IModalService modal


<PageTitle>Index</PageTitle>

@if (boards == null)
{
    <p><em>Loading...</em></p>
}
@*https://timheuer.com/blog/filtering-data-table-with-blazor/*@
else
{


    <div class="form-group">
        <input class="form-control" type="text" placeholder="Search...(Name/Price)"
           @bind="Filter"
           @bind:event="oninput">
    </div>
    <table class="table">
        <thead>
            <tr>
                <th Sortable="true" Filterable="true">Image </th>
                <th>Name</th>
                <th>Width</th>
                <th>Length</th>
                <th>Price</th>
                <th>Volume</th>
                <th>Thickness</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var board in boards)
            {
                if (!IsVisible(board))
                    continue;
                <tr>
                    <img src="@board.Image" asp-append-version="true" width="100" height="100" />
                    <td>@board.Name</td>
                    <td>@board.Width</td>
                    <td>@board.Length</td>
                    <td>@board.Price</td>
                    <td>@board.Volume</td>
                    <td>@board.Thickness</td>
                    <button @onclick="@(() => ShowBoardModal(board))" class="btn btn-primary">View</button>
                </tr>
                @if (showModal)
                {
                    <BoardPage SelectedItem="configureBoard" OnClose="OnBoardPageDialogClose" />
                }
            }
        </tbody>
    </table>
}


@code {
    private List<Board> boards;
    public string Filter { get; set; }
    Board configureBoard = new();
    bool showModal;
    public bool BoardPageDialogOpen { get; set; }

    void ShowBoardModal(Board board)
    {
        configureBoard = board;
        showModal = true;
    }

    private async Task OnBoardPageDialogClose(bool accepted)
    {
        BoardPageDialogOpen = false;
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        boards = await Http.GetFromJsonAsync<List<Board>>("api/Boards/GetAllBoards?version=1.0");
    }

    public bool IsVisible(Board board)
    {
        return string.IsNullOrEmpty(Filter) || board.Name.Contains(Filter, StringComparison.OrdinalIgnoreCase) || board.Price.ToString().StartsWith(Filter);
    }

}
