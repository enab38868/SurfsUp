@using BlazorSurf.Shared
@using Blazored.Modal;
@using Blazored.Modal.Services;
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@*<div>
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>:(</td>
                <td>@SelectedItem.Name</td>
            </tr>
        </tbody>
    </table>
</div>*@

<div class="modal fade show" id="myModal" style="display:block;"  aria-modal="true" role="dialog">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">@SelectedItem.Name</h4>
                <button type="button" class="close" @onclick=ModalCancel>&times;</button>
            </div>
            <div class="modal-body">
                <p>Name: @SelectedItem.Name</p>
                <p>Price: @SelectedItem.Price</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" @onclick=@ModalOk>OK</button>
            </div>
        </div>
    </div>
</div>

@*<form class="dialog-body">
    <div>
        <label>Udlejningsperiode:</label>
        <input type="datetime" @bind=SelectedItem.Rent/>
    </div>
</form>*@


@code {
    [Parameter] 
    public Board? SelectedItem { get; set; }
    [Parameter]
    public EventCallback<bool> OnClose { get; set; }       

    private Task ModalCancel()
    {     
        return OnClose.InvokeAsync(false);
    }
    private Task ModalOk()
    {       
        return OnClose.InvokeAsync(true);
    }

    protected override void OnInitialized()
    {
    }

}